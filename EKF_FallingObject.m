%==========================================================================
% Author: Praveen Jawaharlal Ayyanathan
% Problem: Assignment 5a
% This Algorithtm uses the Extended Kalman Filter to estimate the states 
% of a falling object in the presence of drag and using polar coordinates
%==========================================================================
%%
clear
clc
close all

time = [0 0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 1	1.1	1.2	1.3	1.4	1.5	1.6	1.7	1.8	1.9	2 2.1 2.2 2.3 2.4 2.5 2.6 2.7 2.8 2.9 3	3.1	3.2	3.3	3.4	3.5	3.6	3.7	3.8	3.9	4	4.1	4.2	4.3	4.4	4.5	4.6	4.7	4.8	4.9	5	5.1	5.2	5.3	5.4	5.5	5.6	5.7	5.8	5.9	6	6.1	6.2	6.3	6.4	6.5	6.6	6.7	6.8	6.9	7	7.1	7.2	7.3	7.4	7.5	7.6	7.7	7.8	7.9	8	8.1	8.2	8.3	8.4	8.5	8.6	8.7	8.8	8.9	9	9.1	9.2	9.3	9.4	9.5	9.6	9.7	9.8	9.9	10	10.1	10.2	10.3	10.4	10.5	10.6	10.7	10.8	10.9	11	11.1	11.2	11.3	11.4	11.5	11.6	11.7	11.8	11.9	12	12.1	12.2	12.3	12.4	12.5	12.6	12.7	12.8	12.9	13	13.1	13.2	13.3	13.4	13.5	13.6	13.7	13.8	13.9	14	14.1	14.2	14.3	14.4	14.5	14.6	14.7	14.8	14.9	15	15.1	15.2	15.3	15.4	15.5	15.6	15.7	15.8	15.9	16	16.1	16.2	16.3	16.4	16.5	16.6	16.7	16.8	16.9	17	17.1	17.2	17.3	17.4	17.5	17.6	17.7	17.8	17.9	18	18.1	18.2	18.3	18.4	18.5	18.6	18.7	18.8	18.9	19	19.1	19.2	19.3	19.4	19.5	19.6	19.7	19.8	19.9	20	20.1	20.2	20.3	20.4	20.5	20.6	20.7	20.8	20.9	21	21.1	21.2	21.3	21.4	21.5	21.6	21.7	21.8	21.9	22	22.1	22.2	22.3	22.4	22.5	22.6	22.7	22.8	22.9	23	23.1	23.2	23.3	23.4	23.5	23.6	23.7	23.8	23.9	24	24.1	24.2	24.3	24.4	24.5	24.6	24.7	24.8	24.9	25	25.1	25.2	25.3	25.4	25.5	25.6	25.7	25.8	25.9	26	26.1	26.2	26.3	26.4	26.5	26.6	26.7	26.8	26.9	27	27.1	27.2	27.3	27.4	27.5	27.6	27.7	27.8	27.9	28	28.1	28.2	28.3	28.4	28.5	28.6	28.7	28.8	28.9	29	29.1	29.2	29.3	29.4	29.5	29.6	29.7	29.8	29.9	30	30.1	30.2	30.3	30.4	30.5	30.6	30.7	30.8	30.9	31	31.1	31.2	31.3	31.4	31.5	31.6	31.7	31.8	31.9	32	32.1	32.2	32.3	32.4	32.5	32.6	32.7	32.8	32.9	33	33.1	33.2	33.3	33.4	33.5	33.6	33.7	33.8	33.9	34	34.1	34.2	34.3	34.4	34.5	34.6	34.7	34.8	34.9	35	35.1	35.2	35.3	35.4	35.5	35.6	35.7	35.8	35.9	36	36.1	36.2	36.3	36.4	36.5	36.6	36.7	36.8	36.9	37	37.1	37.2	37.3	37.4	37.5	37.6	37.7	37.8	37.9	38	38.1	38.2	38.3	38.4	38.5	38.6	38.7	38.8	38.9	39	39.1	39.2	39.3	39.4	39.5	39.6	39.7	39.8	39.9	40	40.1	40.2	40.3	40.4	40.5	40.6	40.7	40.8	40.9	41	41.1	41.2	41.3];
range = [7071.067812 7070.340027 7070.141048 7070.088412 7070.567755 7069.889004 7070.633775 7069.77629	7069.300503	7067.945153	7068.211328	7066.126919	7065.661797	7065.559038	7063.840287	7065.357753	7062.176777	7061.140548	7058.819039	7060.027195	7056.499258	7056.851688	7052.946231	7052.370533	7051.357475	7047.698663	7047.149455	7047.114479	7044.426698	7042.335481	7039.475834	7039.63116	7036.159813	7034.670488	7030.842411	7028.700693	7025.130511	7023.385826	7021.105721	7017.548585	7017.92651	7012.859633	7009.95922	7009.070107	7006.693212	7001.692084	6999.292059	6994.048206	6990.814698	6988.842352	6986.651768	6982.097472	6979.024976	6973.642165	6972.704985	6970.641697	6963.524533	6961.535408	6957.014735	6953.220027	6949.031179	6945.973939	6939.847197	6937.769977	6932.826603	6930.501574	6928.448561	6921.804851	6914.739391	6910.988204	6909.50519	6903.433483	6898.731679	6893.395777	6888.718082	6884.265163	6879.737299	6876.460362	6869.585546	6863.290042	6858.683944	6857.065474	6850.677331	6843.69828	6839.903083	6835.453563	6828.866831	6822.406415	6818.110009	6811.847479	6807.344238	6803.247093	6795.349362	6789.692762	6784.809387	6779.320695	6773.328423	6765.377536	6760.788933	6755.213531	6749.562012	6745.525585	6739.837288	6732.132268	6726.197297	6720.954409	6712.887011	6708.595375	6699.850576	6694.779729	6688.034135	6683.198017	6676.338144	6668.581329	6661.32435	6655.357126	6650.37976	6641.899004	6636.930547	6630.152152	6625.166643	6617.701691	6610.658041	6604.296887	6596.449742	6589.969286	6583.363866	6574.025159	6569.216435	6563.851262	6556.973954	6549.023047	6540.860667	6534.112178	6525.908811	6519.141966	6513.642399	6506.328932	6499.350315	6490.193914	6484.342267	6476.11033	6469.198154	6462.30133	6454.113256	6447.941847	6440.500171	6431.635246	6424.426119	6417.477276	6408.961483	6404.158061	6395.977718	6388.28512	6379.845935	6372.107688	6365.202297	6359.738698	6350.983617	6344.208486	6335.482036	6328.415789	6320.247628	6312.352848	6305.116173	6296.801712	6290.032178	6280.77476	6272.839403	6265.36583	6259.047901	6252.820528	6244.885129	6236.526938	6228.147014	6220.516312	6211.43031	6203.313696	6198.253537	6188.234744	6181.391164	6173.194328	6166.583205	6158.861055	6147.40727	6143.387406	6134.497427	6127.264201	6121.200075	6113.545763	6102.855678	6095.981323	6088.483686	6080.644389	6071.803878	6064.116467	6057.262575	6048.140438	6041.956626	6035.023525	6026.104687	6017.18169	6009.063193	6001.07158	5995.132775	5987.600216	5979.637925	5972.295102	5964.569039	5956.38668	5949.320403	5940.180833	5933.321478	5927.317767	5918.466276	5909.351553	5902.194824	5894.736677	5886.599929	5878.252086	5870.520392	5863.214968	5856.125909	5848.484404	5840.633993	5835.04952	5826.762741	5819.504585	5812.39895	5803.30397	5795.530364	5788.206162	5779.477208	5773.953762	5767.385056	5759.025821	5754.322107	5744.411475	5736.510198	5729.953813	5721.2921	5715.392704	5706.932252	5699.173604	5692.525172	5686.462435	5678.043393	5673.039691	5663.22134	5657.531773	5651.53711	5643.807354	5634.030069	5629.072647	5620.236438	5614.879932	5607.584923	5602.320919	5593.678978	5587.372064	5580.547853	5574.012537	5566.542116	5559.555261	5554.386293	5544.748988	5540.053031	5532.447038	5527.00166	5520.679527	5513.863973	5505.977508	5500.503141	5493.618473	5488.255121	5480.347778	5474.503742	5469.044972	5462.033799	5456.304956	5448.606653	5443.290417	5437.026727	5432.011427	5425.934991	5420.453709	5410.808235	5407.073241	5400.832008	5393.704348	5390.456409	5383.498964	5376.422499	5372.51707	5367.877177	5359.773334	5353.97514	5348.645708	5341.682072	5339.569015	5331.80788	5327.444516	5320.953383	5316.823525	5309.931541	5306.103554	5299.50226	5293.843232	5289.057699	5282.784313	5277.612606	5272.961243	5268.510294	5260.913409	5257.472687	5254.034394	5249.397052	5243.381395	5239.624654	5234.15479	5229.422875	5224.106357	5219.394001	5214.847996	5211.541489	5206.028731	5201.737191	5195.941712	5193.332944	5186.808029	5184.584399	5179.684323	5174.465793	5169.795156	5167.969543	5163.094188	5158.639561	5156.522369	5150.210593	5147.844203	5145.358713	5138.853037	5134.252898	5131.30595	5128.891605	5125.491389	5121.039387	5115.809368	5115.685896	5111.65112	5106.748383	5105.014629	5102.841333	5096.783995	5094.769122	5092.293343	5087.037938	5083.494397	5082.630965	5078.212009	5077.255167	5072.1133	5071.287466	5068.216806	5064.864075	5063.027149	5059.623881	5056.956046	5056.301074	5054.942333	5051.021468	5048.512562	5046.079268	5043.625743	5041.511912	5040.635208	5037.904188	5035.653705	5032.314423	5032.637214	5030.369153	5028.301612	5023.992995	5023.313914	5023.547717	5021.187144	5021.694603	5018.822844	5017.553661	5015.726308	5014.225937	5015.144201	5012.540012	5010.972754	5009.995931	5009.802943	5006.320056	5006.489709	5006.193668	5005.728349	5003.713668	5002.750958	5003.030853	5001.678485	5001.878364	5001.421068	5003.089205	5000.965212	5000.724719	5000.313902	5000.130068	4999.591468	5000.34755	4999.479331];
theta = [0.785398163 0.786562718 0.785032957 0.784457571 0.783925555 0.786105907 0.783275572 0.784699925 0.785256484 0.7849877 0.78563389	0.783477557	0.785712151	0.784963595	0.783671577	0.784189915	0.783869427	0.783661862	0.784302766	0.783813349	0.783493772	0.785019559	0.783139708	0.783349793	0.781986269	0.781120643	0.781811253	0.781230739	0.78246171	0.781361482	0.781829025	0.781164492	0.780615799	0.779731239	0.780265939	0.780288074	0.780375028	0.778929862	0.779037777	0.776880051	0.776585342	0.777226684	0.776904961	0.776411082	0.77446706	0.774607421	0.77377472	0.774188048	0.773218938	0.771972385	0.7734644	0.771272736	0.771993795	0.772955917	0.769372096	0.770439528	0.769124757	0.768059032	0.768835645	0.768569446	0.767534199	0.764973874	0.765526442	0.766186192	0.766676028	0.764557008	0.763729652	0.763383119	0.764667487	0.762193233	0.762084424	0.760608807	0.761947277	0.759128803	0.75822188	0.758526749	0.756411461	0.755557283	0.75575199	0.753898222	0.751468793	0.752618901	0.752572995	0.751712343	0.74979724	0.751314605	0.749900221	0.749016254	0.749201806	0.748744111	0.746307831	0.746085408	0.743177767	0.744268723	0.74184065	0.742402942	0.740748697	0.738834502	0.737916035	0.737176628	0.737290461	0.734122107	0.735955062	0.735257429	0.731652847	0.733891796	0.729634553	0.729579202	0.729797075	0.726713624	0.725949706	0.724220653	0.725300276	0.723540211	0.722803141	0.721803546	0.719467185	0.72008206	0.719290149	0.714687332	0.715017688	0.713420692	0.713802272	0.712281184	0.710731965	0.708644882	0.70710523	0.707113139	0.705934688	0.705704723	0.703440594	0.70136799	0.698940824	0.700335527	0.697896534	0.696011604	0.695578796	0.694590346	0.690608936	0.691357351	0.691331294	0.68822207	0.688156927	0.68721263	0.685113818	0.68166497	0.683645502	0.679856095	0.680200153	0.678390893	0.674375974	0.675341367	0.674255208	0.67195867	0.670349441	0.667960954	0.667492656	0.666224266	0.664873382	0.66338444	0.660835448	0.658039997	0.659112336	0.657182044	0.655616941	0.655120421	0.651997972	0.650062176	0.648355659	0.646959763	0.644909227	0.645123275	0.642696278	0.639790039	0.637657166	0.638244605	0.635207	0.634326165	0.633157907	0.629590563	0.628180188	0.624317063	0.624864036	0.623610423	0.621282595	0.620857664	0.618552185	0.617163295	0.613530318	0.612847135	0.610003835	0.609124287	0.60797595	0.604277704	0.602687188	0.601935686	0.599478049	0.597495391	0.595797888	0.593205958	0.593263187	0.590133792	0.587327466	0.585383117	0.584127627	0.583436051	0.581214947	0.580818565	0.574981658	0.575144109	0.573287516	0.570482388	0.568645396	0.564790751	0.565537954	0.562794105	0.559202601	0.559832406	0.556710707	0.553071118	0.550458364	0.548884361	0.546022113	0.544763077	0.543084207	0.541250002	0.540684769	0.537063853	0.536990261	0.533425419	0.529135982	0.528108867	0.524372913	0.524351747	0.521958972	0.519812879	0.5190117	0.51619214	0.51286214	0.510999085	0.508575322	0.505985939	0.502960568	0.500308104	0.498371032	0.49723819	0.494344319	0.492663381	0.490076368	0.488358971	0.484252871	0.482727676	0.479208911	0.476275202	0.475848044	0.473759225	0.471110275	0.468278167	0.465092134	0.46185381	0.458726857	0.457676008	0.456027357	0.452649532	0.450609787	0.447114165	0.444814475	0.442797101	0.441583461	0.438464249	0.433379472	0.431890992	0.430647516	0.426862471	0.424340672	0.421751512	0.420390948	0.417631367	0.416579246	0.410911275	0.409289813	0.405190853	0.402257859	0.403164275	0.398223683	0.396155809	0.39302972	0.391037814	0.388942256	0.387512459	0.382082931	0.378725285	0.376934196	0.375035821	0.371027974	0.365855254	0.365963365	0.362389298	0.359837636	0.356523366	0.353490641	0.352622672	0.34896883	0.346766467	0.343489922	0.341004926	0.338227798	0.333813486	0.330312278	0.330118813	0.326449741	0.323568349	0.319893779	0.318512253	0.314864933	0.310579431	0.309477418	0.305444644	0.303309205	0.302609144	0.298138514	0.295802939	0.290037349	0.286341003	0.283890687	0.283000119	0.279463431	0.276032175	0.272314273	0.26936315	0.266764601	0.262265121	0.260274755	0.259106028	0.253316265	0.250863004	0.248813018	0.246070322	0.243457634	0.239684799	0.236293898	0.233915023	0.229859519	0.228533834	0.224665423	0.221841962	0.216405716	0.214732706	0.212393687	0.21021874	0.204648063	0.201416039	0.199869707	0.195446343	0.193368291	0.189825762	0.186404263	0.183707646	0.180093474	0.178030422	0.172851096	0.171368128	0.167196076	0.164648969	0.162292839	0.156755095	0.155804375	0.150013287	0.148162713	0.14434105	0.141350979	0.136537963	0.135644205	0.131270909	0.126287027	0.125460371	0.122511205	0.120009546	0.115247667	0.11203553	0.107154569	0.106578921	0.10197772	0.097897889	0.09673	0.091829207	0.088968081	0.085409233	0.081235198	0.078269195	0.076539368	0.072090252	0.068775247	0.068702548	0.062008405	0.06021336	0.055329549	0.052395026	0.048765439	0.046471797	0.043050413	0.04017113	0.036736388	0.033466806	0.029279416	0.026689035	0.023578331	0.018597878	0.015009921	0.013610648	0.010521415	0.00642536	0.001246041	0.000308745];

%%
%==========================================================================
%Part - A: Initialization of the state vector and other necessaary matrices
%==========================================================================

% Initial State Vector[position; velocity; acceleration]
X_P = [5000;5000;1;0;0.0;-9.8];

% time step
dt = 0.1; 

m = 5; % mass in kg
dia = 0.12; % diameter in m
S = pi*(dia/2)^2; % cross-sectional area in m^2
g = 9.8066; % acceleration  due to gravity
rho = 1.2; % atmospheric density in  kg/m^3
Cd = 0.25; % Drag Coefficient
B = m/(Cd*S); % Ballistic Coefficient

% Process Noise Covariance
Q = [0.01,0,0,0,0,0;0,0.005,0,0,0,0;0,0,0.01,0,0,0;0,0,0.,0.01,0,0;0,0,0.0,0,0.01,0;0,0,0,0,0,0.01];

% Measurement Noise Covariance
R = [1 0;0 1e-6]; 

% Initial Covariance Matrix
factor = 1;
P_P = [1,0,0,0,0,0;0,10,0,0,0,0;0,0,100,0,0,0;0,0,0,1,0,0;0,0,0.0,0,10,0;0,0,0,0,0,100]*factor;

% Given Measurements
Y = [range;theta];

%==========================================================================
% Part - B: Extended Kalman Filter Algorithm
%==========================================================================
t = 0;
for k = 1:length(time)
    % Measurement update equations    
    H = [X_P(1,k)/sqrt(X_P(1,k)^2+X_P(2,k)^2), X_P(2,k)/sqrt(X_P(1,k)^2+X_P(2,k)^2), 0, 0, 0, 0; -X_P(2,k)/(X_P(1,k)^2 + X_P(2,k)^2), X_P(1,k)/(X_P(1,k)^2 + X_P(2,k)^2), 0, 0, 0, 0]; % Jacobian
    K = P_P(:,:,k)*H.'*(H*P_P(:,:,k)*H.' + R)^(-1);
    h = [sqrt(X_P(1,k)^2+X_P(2,k)^2);atan(X_P(2,k)/X_P(1,k))];
    X(:,k) = X_P(:,k) + K*(Y(:,k) - h);
    res(:,k) = Y(:,k) - h; % Residual or the Innovation sequence
    P(:,:,k) = (eye(6,6) - K*H)*P_P(:,:,k);
    
    % Time update equations
    norm_v = sqrt(X(3,k)^2+X(4,k)^2); % Norm of velocity 
    F = [1,0,dt,0,0.5*dt^2,0;0,1,0,dt,0,0.5*dt^2;0,0,1,0,dt,0;0,0,0,1,0,dt;0,0,-0.5*rho*norm_v/B,0,0,0;0,0,0,-0.5*rho*norm_v/B,0,0;];   
    %F = [1,0,dt,0,0.5*dt^2,0;0,1,0,dt,0,0.5*dt^2;0,0,1,0,dt,0;0,0,0,1,0,dt;0,0,-0.5*rho*norm_v/B- rho*X(3,k)^2/(B*norm_v),-rho*X(4,k)*X(3,k)/(B*norm_v),0,0;0,0,-rho*X(4,k)*X(3,k)/(B*norm_v),-0.5*rho*norm_v/B - rho*X(4,k)^2/(B*norm_v),0,0;];
    f = [X(1,k)+X(3,k)*dt+0.5*X(5,k)*dt^2;X(2,k)+X(4,k)*dt+0.5*X(6,k)*dt^2;X(3,k)+X(5,k)*dt;X(4,k)+X(6,k)*dt;-0.5*rho*X(3,k)*norm_v/B ;-0.5*rho*X(4,k)*norm_v/B - g];
    X_P(:,k+1) = f;     
    E(:,k) = X(:,k) - X_P(:,k);  % Error
    P_P(:,:,k+1) = F*P(:,:,k)*F.' + Q;
end

% Picking the error covariance that are present along the diagonal
for i = 1:length(time)
    P_xpos(i) = P(1,1,i);
    P_zpos(i) = P(2,2,i);
    P_xvel(i) = P(3,3,i);
    P_zvel(i) = P(4,4,i);
    P_xacc(i) = P(5,5,i);
    P_zacc(i) = P(6,6,i);
end

%==========================================================================
% Part - C: Plotting
%==========================================================================

% X-Position VS Time Plot
figure(1)
%plot(time,X_P(1,1:end-1))
%hold on
%subplot(3,1,1)
plot(time,X(1,:))
xlabel('Time (s)')
ylabel('X-Position (m)')
title('X-Position VS Time')
legend('Position estimate','Location','NorthEast')

% X-Velocity VS Time Plot
figure(2)
%hold on
%subplot(3,1,2)
plot(time,X(3,:))
xlabel('Time (s)')
ylabel('X-Velocity (m/s)')
title('X-Velocity VS Time')
legend('Velocity estimate','Location','NorthEast')

% X-Acceleration VS Time Plot
figure(3)
%hold on
%subplot(3,1,3)
plot(time,X(5,:))
ylim([-10 1])
xlabel('Time (s)')
ylabel('X-Acceleration (m/s^2)')
title('X-Acceleration VS Time')
legend('Acceleration estimate','Location','NorthEast')

% Z-Position VS Time Plot
figure(4)
%hold on
%subplot(3,1,1)
plot(time,X(2,:))
xlabel('Time (s)')
ylabel('Z-Position (m)')
title('Z-Position VS Time')
legend('Position estimate','Location','NorthEast')

% Z-Velocity VS Time Plot
figure(5)
%hold on
%subplot(3,1,2)
plot(time,X(4,:))
xlabel('Time (s)')
ylabel('Z-Velocity (m/s)')
title('Z-Velocity VS Time')
legend('Velocity estimate','Location','NorthEast')

% X-Acceleration VS Time Plot
figure(6)
%hold on
%subplot(3,1,3)
plot(time,X(6,:))
ylim([-10 1])
xlabel('Time (s)')
ylabel('Z-Acceleration (m/s^2)')
title('Z-Acceleration VS Time')
legend('Acceleration estimate','Location','NorthEast')

% X-Position Standard Deviation and Error VS Time Plot
figure(7)
plot(time,sqrt(P_xpos),'r')
hold on
plot(time,E(1,:))
plot(time,-sqrt(P_xpos),'r')
xlabel('Time (s)')
ylabel('X-Position Standard Deviation and Error (m)')
title('X-Position Standard Deviation and Error VS Time')
legend('Standard Deviation','Error','Location','NorthEast')

% Velocity Standard Deviation and Error VS Time Plot
figure(8)
plot(time,sqrt(P_xvel),'r')
hold on
plot(time,E(2,:))
plot(time,-sqrt(P_xvel),'r')
xlabel('Time (s)')
ylabel('X-Velocity Standard Deviation and Error (m/s)')
title('X-Velocity Standard Deviation and Error VS Time')
legend('Standard Deviation','Error','Location','NorthEast')

% Acceleration Standard Deviation and Error VS Time Plot
figure(9)
plot(time,sqrt(P_xacc),'r')
hold on
plot(time,E(3,:))
plot(time,-sqrt(P_xacc),'r')
xlabel('Time (s)')
ylabel('X-Acceleration Standard Deviation and Error(m/s^2)')
title('X-Acceleration Standard Deviation and Error VS Time')
legend('Standard Deviation','Error','Location','NorthEast')

% Z-Position Standard Deviation and Error VS Time Plot
figure(10)
plot(time,sqrt(P_zpos),'r')
hold on
plot(time,E(1,:))
plot(time,-sqrt(P_zpos),'r')
xlabel('Time (s)')
ylabel('Z-Position Standard Deviation and Error (m)')
title('Z-Position Standard Deviation and Error VS Time')
legend('Standard Deviation','Error','Location','NorthEast')

% Z-Velocity Standard Deviation and Error VS Time Plot
figure(11)
plot(time,sqrt(P_zvel),'r')
hold on
plot(time,E(2,:))
plot(time,-sqrt(P_zvel),'r')
xlabel('Time (s)')
ylabel('Z-Velocity Standard Deviation and Error (m/s)')
title('Z-Velocity Standard Deviation and Error VS Time')
legend('Standard Deviation','Error','Location','NorthEast')

% Z-Acceleration Standard Deviation and Error VS Time Plot
figure(12)
plot(time,sqrt(P_zacc),'r')
hold on
plot(time,E(3,:))
plot(time,-sqrt(P_zacc),'r')
xlabel('Time (s)')
ylabel('Z-Acceleration Standard Deviation and Error(m/s^2)')
title('Z-Acceleration Standard Deviation and Error VS Time')
legend('Standard Deviation','Error','Location','NorthEast')

% Residual (Innovation Sequence) VS Time Plot
figure(13)
plot(time,res(1,:))
xlabel('Time (s)')
ylabel('Residual (Range)')
title('Residual Sequence (Range) VS Time')

% Residual (Innovation Sequence) VS Time Plot
figure(14)
plot(time,res(2,:))
xlabel('Time (s)')
ylabel('Residual (Theta)')
title('Residual Sequence (Theta) VS Time')

% Auto-Correlation of the Innovation Sequence
figure(15)
autocorr(res(1,:),20)
xlabel('Lags')
ylabel('Auto-Correlation')
title('Autocorrelation of the Range Residual Sequence')
res_ac_1 = autocorr(res(1,:),20);

figure(16)
autocorr(res(2,:),20)
xlabel('Lags')
ylabel('Auto-Correlation')
title('Autocorrelation of the Theta Residual Sequence')
res_ac_2 = autocorr(res(1,:),20);
 
% Findng the mean of residual
res_mean_1 = mean(res(1,:));
res_mean_2 = mean(res(2,:));

%%
fprintf('Mean of the Range residual sequence: %f \n',res_mean_1)
fprintf('Mean of the Theta residual sequence: %f \n',res_mean_2)